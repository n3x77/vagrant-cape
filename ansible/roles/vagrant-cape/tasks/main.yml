---
# tasks file for vagrant-cape

- name: APT | Update Ubuntu 20.04 vagrant box
  apt:
    update_cache: true
    cache_valid_time: 3600

- name: APT | Upgrade all packages to latest version
  apt:
    name: "*"
    state: latest

- name: Update Ubuntu kernel for BPF support
  apt:
    name: linux-generic-hwe-20.04
    state: present
  register: modern_kernel

- name: Reboot
  reboot:
  when: modern_kernel is changed

- name: Remove old kernel
  apt:
    autoremove: true

- name: Add Ubuntu security repository
  apt_repository:
    repo: "deb http://security.ubuntu.com/ubuntu {{ ansible_distribution_release }}-security main"
    state: present
    update_cache: true

- name: Update packages to lastest version
  apt:
    upgrade: dist
    update_cache: true
    cache_valid_time: 3600

- name: Install CAPE dependencies apt packages
  apt:
    name: 
      - aptitude
      - apparmor-utils
      - autoconf
      - automake
      - binutils-dev
      - bison
      - cabextract
      - checkinstall
      - curl
      - exiftool
      - flex
      - gcc
      - g++
      - geoip-database
      - git
      - graphviz
      - jq
      - libarchive-dev
      - libcap2-bin
      - libconfig-dev
      - libdate-simple-perl
      - libdatetime-perl
      - libdbd-mysql-perl
      - libfuzzy-dev
      - libgeoip-dev
      - libglib2.0-dev
      - libjansson-dev
      - libjpeg-dev
      - libldns-dev
      - libmagic1
      - libmagic-dev
      - libpcap-dev
      - libpcre3-dev
      - libpq-dev
      - libssl-dev
      - libtool
      - lzip
      - make
      - mono-utils
      - net-tools
      - numactl
      #- openjdk-11-jdk-headless
      #- openjdk-8-jdk-headless
      - openvpn
      - p7zip-full
      - pkg-config
      - privoxy
      - psmisc
      - python3
      - python3-dev
      - python3-pil
      - python3-pip
      - python3-pydot
      - python3-pyelftools
      - rar
      - software-properties-common
      - sqlite3
      - ssdeep
      - subversion
      - swig
      - sysfsutils
      - tcpdump
      - tmux
      - unace-nonfree
      - unrar
      - unzip
      - upx-ucl
      - uthash-dev
      - uwsgi
      - uwsgi-plugin-python3
      - wget
      - wireguard
      - wkhtmltopdf
      - xfonts-100dpi
      - xvfb
      - zip
      - zlib1g-dev
    state: present
    update_cache: true


- name: Ensure pip is updated to latest
  pip:
    name: pip
    state: latest # noqa package-latest
    executable: pip3

- name: Download CAPE pip requirements file
  get_url:
    url: "https://raw.githubusercontent.com/kevoreilly/CAPEv2/master/requirements.in"
    dest: /tmp/requirements.txt

- name: Clean up breaking distutils files prior to installing pip packages
  file:
    path: "/usr/lib/python3/dist-packages/{{ item }}"
    state: absent
  loop:
    - "PyYAML-5.3.1.egg-info"
    - "pyasn1_modules"
    - "pyasn1_modules-0.2.1.egg-info"

- name: Install CAPE dependencies pip packages
  pip:
    requirements: /tmp/requirements.txt
    executable: pip3

- name: Add MongoDB repository GPG key
  apt_key:
    url: "{{ mongodb_repo_key }}"
    state: present
    validate_certs: true

- name: Add MongoDB repository
  apt_repository:
    repo: "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu {{ ansible_distribution_release }}/mongodb-org/{{ mongodb_version }} multiverse"
    state: present
    filename: "monogdb-org-{{ mongodb_version }}"
    update_cache: true

# Consider moving to requirements.yml
- name: Install PyMongo
  pip:
    name: pymongo
    state: present
    extra_args: --user

- name: Install MongoDB
  apt:
    name: mongodb-org
    state: present

- name: Create MongoDB data directory
  file:
    path: "{{ mongodb_db_main_path }}"
    state: directory
    owner: mongodb
    group: mongodb

- name: Create MongoDB db directories
  file:
    path: "{{ item }}"
    state: directory
    owner: mongodb
    group: mongodb
  loop: "{{ mongodb_db_paths }}"

- name: Disable transparent hugepage
  lineinfile:
    path: /etc/sysfs.conf
    line: "{{ item }}"
    create: true
    owner: root
    group: root
    mode: 0644
  loop:
    - kernel/mm/transparent_hugepage/enabled = never
    - kernel/mm/transparent_hugepage/defrag = never

# - name: Inventory system services facts
  # service_facts:

- name: Stop and Disable built-in MongDB service
  systemd:
    name: mongod.service
    state: stopped
    enabled: false
    daemon_reload: true
  # when: '"mongod.service" in ansible_facts.services | flatten'

- name: Delete built-in MongDB service unit file
  file:
    path: /lib/systemd/system/mongod.service
    state: absent

- name: Template MongoDB systemd unit file
  template:
    src: mongodb.service.j2
    dest: /lib/systemd/system/mongodb.service
  notify:
    - Restart and enable MongoDB service


- name: Add PostgresSQL reposoitory GPG key
  apt_key:
    url: "{{ postgres_repo_key }}"
    state: present

- name: Add PostgresSQL repository
  apt_repository:
    repo: "deb http://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main"
    state: present
    filename: pgdg
    update_cache: true

- name: Install PostgresSQL database
  apt:
    name:
      - postgresql
      - postgresql-client
    state: present

- name: Install psycopg2
  pip:
    name: psycopg2-binary
    state: present

# TODO: Check if this is needed this seem corrputed in Ansible 2.9 together with Ubuntu 20.04
# - name: Inventory system services
  # service_facts: null

- name: Start PostgresSQL service
  systemd:
    name: postgresql.service
    state: started
  # when: ansible_facts.services['postgresql.service'] is defined
  # register: postgresql_service_start

- name: Configure PostgresSQL for CAPE
  block:
    - name: Create CAPE PostgresSQL database
      postgresql_db:
        name: "{{ cape_db_name }}"
        state: present
        encoding: UTF-8
      become_user: postgres

    - name: Create CAPE PostgresSQL database user and grant permissions
      postgresql_user:
        name: "{{ cape_user }}"
        password: "{{ cape_pass }}"
        db: "{{ cape_db_name }}"
        priv: "ALL"
        expires: infinity
      become_user: postgres
  when: postgresql_service_start is success

- name: Check if Yara is installed
  stat:
    path: "{{ yara_default_install_dir }}/yara"
  register: yara_is_installed

- name: Check Yara version
  command:
    cmd: "{{ yara_default_install_dir }}/yara --version"
  register: yara_installed_version
  changed_when: false
  when: yara_is_installed.stat is defined and yara_is_installed.stat.exists | bool

- name: Download and Install Yara
  block:
    - name: Download Yara sources
      git:
        repo: "{{ yara_repo_rul }}"
        dest: "{{ yara_source_code_dir }}"
        version: "v{{ yara_release_version }}"

    - name: Bootstrap Yara source code
      command:
        cmd: ./bootstrap.sh
        chdir: "{{ yara_source_code_dir }}"
        creates: "{{ yara_source_code_dir }}/configure"

    - name: Configure Yara source code
      command:
        cmd: "./configure {{ ['--'] | product(yara_config_options) | map('join') | join(' ') }}"
        chdir: "{{ yara_source_code_dir }}"
        creates: "{{ yara_source_code_dir }}/config.log"

    - name: Build Yara source code
      make:
        chdir: "{{ yara_source_code_dir }}"

    - name: Install Yara
      make:
        chdir: "{{ yara_source_code_dir }}"
        target: install
  when: (yara_is_installed.stat is defined and not yara_is_installed.stat.exists | bool) or 
        yara_installed_version.stdout is defined and yara_release_version > yara_installed_version.stdout

- name: Download and install Yara-Python
  block:
    - name: Clone Yara-Python repository
      git:
        repo: "{{ yara_python_repo_url }}"
        dest: "{{ yara_python_source_code_dir }}"
        recursive: true
        version: "v{{ yara_release_version }}"

    - name: Install Yara-Python
      pip:
        name: yara-python
        state: present
        executable: pip3
        extra_args: "--no-index --find-links=file:///{{ yara_python_source_code_dir }}"
